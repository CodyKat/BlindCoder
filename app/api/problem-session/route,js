import redis from '../../../lib/redisClient';
import jwt from 'jsonwebtoken';
import { getOneProblemMetadataFromDB } from '../../../lib/problemUtils';

const JWT_SECRET = process.env.JWT_SECRET;

export default async function handler(req, res) {
    const { problemNum } = req.query;
    const sessionKey = `session:${req.cookies.token || req.headers['x-forwarded-for'] || req.socket.remoteAddress}`;

    try {
        const activeProblemSession = await redis.get(sessionKey);

        if (activeProblemSession && activeProblemSession !== problemNum) {
            await redis.del(sessionKey);
            console.log(`Session for problem ${activeProblemSession} has expired.`);

            res.status(200).json({ message: `Previous session expired. New session created.`, alert: true});
        }
        
        const problem = await getOneProblemMetadataFromDB(problemNum);
        const [hours, minutes, seconds] = problem.playtime.split(':').map(Number);
        const SESSION_EXPIRY = (hours * 3600) + (minutes * 60) + seconds;

        await redis.set(sessionKey, problemNum, 'EX', SESSION_EXPIRY);
        const token = jwt.sign({ problemNum }, JWT_SECRET, { expireIn: SESSION_EXPIRY });


        res.status(200).json({ token, problem });
    } catch (error) {
        console.error('Error handling problem session:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
}